"use client";

import React, { useState } from 'react';
import useGraphics from './useGraphics'; // Import the custom hook
import { FaPencilAlt } from 'react-icons/fa'; // Import pencil icon from react-icons

const Page: React.FC = () => {
  const {
    isPopupOpen,
    isPreviewOpen,
    graphics,
    newGraphic,
    hoveredIndex,
    currentGraphic,
    editingIndex,
    handleOpenPopup,
    handleClosePopup,
    handleInputChange,
    handleFileChange,
    handleSaveGraphic,
    handlePreviewGraphic,
    handleClosePreview,
    setHoveredIndex,
  } = useGraphics();

  const [searchQuery, setSearchQuery] = useState<string>(''); // State for the search query

  // Function to handle search query change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  // Filtered graphics based on search query
  const filteredGraphics = graphics.filter(
    (graphic) =>
      graphic.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      graphic.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="flex flex-col items-center p-6 bg-gray-100 h-screen">
      {/* Header Section */}
      <div className="flex justify-between items-center w-full max-w-4xl mb-4">
        <h1 className="text-2xl font-bold">Graphics</h1>
        <button
          onClick={() => handleOpenPopup()}
          className="bg-blue-500 text-white py-2 px-4 rounded"
        >
          + Create Graphic
        </button>
      </div>

      {/* Filter and Search Controls */}
      <div className="flex items-center gap-4 w-full max-w-4xl mb-4">
        <select className="border p-2 rounded">
          <option>Filter</option>
        </select>
        <input
          type="text"
          placeholder="Search..."
          className="border p-2 rounded flex-grow"
          value={searchQuery}
          onChange={handleSearchChange}
        />
        <select className="border p-2 rounded">
          <option>Sort</option>
        </select>
      </div>

      {/* Graphics List */}
      <div className="flex gap-4 flex-wrap w-full max-w-4xl">
        {filteredGraphics.map((graphic, index) => (
          <div
            key={index}
            className="relative border border-gray-300 bg-white p-4 rounded-md shadow-md w-56 text-center"
            onMouseEnter={() => setHoveredIndex(index)}
            onMouseLeave={() => setHoveredIndex(null)}
          >
            {/* Graphic Image Container */}
            <div className="relative w-full h-32 bg-gray-200 mb-4 overflow-hidden flex items-center justify-center">
              {graphic.image ? (
                <img
                  src={URL.createObjectURL(graphic.image)}
                  alt={graphic.name}
                  className="object-cover w-full h-full"
                />
              ) : (
                <div className="w-16 h-16 text-gray-500">No Graphic</div>
              )}

              {/* Centered Preview Button */}
              {hoveredIndex === index && (
                <button
                  onClick={() => handlePreviewGraphic(graphic)}
                  className="absolute bg-blue-500 text-white py-1 px-2 rounded"
                  style={{ top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}
                >
                  Preview
                </button>
              )}
            </div>

            {/* Graphic Details */}
            <h2 className="font-bold">{graphic.name}</h2>
            <p className="text-sm text-gray-600">Created on: {graphic.date}</p>

            {/* Pencil Icon for Edit */}
            <button
              className="absolute top-2 right-2 text-blue-500"
              onClick={() => handleOpenPopup(graphic, index)}
            >
              <FaPencilAlt size={16} />
            </button>
          </div>
        ))}
      </div>

      {/* Preview Popup */}
      {isPreviewOpen && currentGraphic && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-3/4 max-w-2xl text-center">
            {currentGraphic.image && (
              <img
                src={URL.createObjectURL(currentGraphic.image)}
                alt={currentGraphic.name}
                className="w-full h-[400px] object-contain mb-4 rounded"
              />
            )}
            <h2 className="text-lg font-bold mb-2 text-center">{currentGraphic.name}</h2>
            <p className="text-sm text-gray-700 mb-4 text-center">{currentGraphic.description}</p>
            <button
              onClick={handleClosePreview}
              className="bg-blue-500 text-white py-2 px-4 rounded mx-auto"
            >
              Close
            </button>
          </div>
        </div>
      )}

      {/* Edit/Create Popup */}
      {isPopupOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96">
            <h2 className="text-lg font-bold mb-4 text-center">
              {editingIndex !== null ? 'Edit Graphic' : 'Upload New Graphic'}
            </h2>
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Name: *</label>
              <input
                type="text"
                name="name"
                value={newGraphic.name}
                onChange={handleInputChange}
                placeholder="Graphic name"
                className="border p-2 rounded w-full"
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Description: *</label>
              <textarea
                name="description"
                value={newGraphic.description}
                onChange={handleInputChange}
                placeholder="Graphic description"
                className="border p-2 rounded w-full"
              ></textarea>
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Graphic: *</label>
              <input type="file" onChange={handleFileChange} className="border p-2 rounded w-full" />
            </div>
            <div className="flex justify-center space-x-4">
              {/* Centered Buttons */}
              <button onClick={handleClosePopup} className="bg-gray-300 text-black py-2 px-4 rounded">
                Cancel
              </button>
              <button onClick={handleSaveGraphic} className="bg-blue-500 text-white py-2 px-4 rounded">
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Page;